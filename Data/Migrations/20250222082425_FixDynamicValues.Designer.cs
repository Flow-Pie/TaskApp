// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskApp.Data;

#nullable disable

namespace TaskApp.Data.Migrations
{
    [DbContext(typeof(TaskStoreContext))]
    [Migration("20250222082425_FixDynamicValues")]
    partial class FixDynamicValues
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("TaskApp.Entities.Calendar", b =>
                {
                    b.Property<int>("CalendarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EventTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TasksId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CalendarId");

                    b.HasIndex("TasksId");

                    b.ToTable("calendars");

                    b.HasData(
                        new
                        {
                            CalendarId = 1,
                            EndTime = "11:00 AM",
                            EventTitle = "Calendar 1 Event Title",
                            StartTime = "10:00 AM",
                            TasksId = 1
                        });
                });

            modelBuilder.Entity("TaskApp.Entities.Reminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReminderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TasksId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("ReminderId");

                    b.HasIndex("TasksId");

                    b.ToTable("reminders");

                    b.HasData(
                        new
                        {
                            ReminderId = 1,
                            ReminderDate = new DateTime(2025, 2, 22, 11, 24, 23, 928, DateTimeKind.Local).AddTicks(2986),
                            TasksId = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2021)
                        });
                });

            modelBuilder.Entity("TaskApp.Entities.TaskHistory", b =>
                {
                    b.Property<int>("TaskHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TasksId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("TaskHistoryId");

                    b.HasIndex("TasksId");

                    b.ToTable("taskHistories");

                    b.HasData(
                        new
                        {
                            TaskHistoryId = 1,
                            TaskStatus = 0,
                            TasksId = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2021)
                        });
                });

            modelBuilder.Entity("TaskApp.Entities.Tasks", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskPriority")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("dateCreated")
                        .HasColumnType("TEXT");

                    b.HasKey("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("tasks");

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            Status = true,
                            TaskDate = new DateTime(2025, 2, 22, 11, 24, 23, 906, DateTimeKind.Local).AddTicks(8415),
                            TaskDescription = "Task 1 Description",
                            TaskPriority = "High",
                            TaskTitle = "Task 1",
                            UserId = 3,
                            dateCreated = new DateOnly(2023, 10, 1)
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            UserId = 3,
                            DateRegistered = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "johndoe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "password123",
                            Role = "Admin",
                            Username = "John Doe"
                        });
                });

            modelBuilder.Entity("TaskApp.Entities.Calendar", b =>
                {
                    b.HasOne("TaskApp.Entities.Tasks", "Tasks")
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TaskApp.Entities.Reminder", b =>
                {
                    b.HasOne("TaskApp.Entities.Tasks", "Tasks")
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TaskApp.Entities.TaskHistory", b =>
                {
                    b.HasOne("TaskApp.Entities.Tasks", "Tasks")
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TaskApp.Entities.Tasks", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
